# -*- python -*-
# ex: set syntax=python:

from buildbot.worker import Worker
from buildbot.changes.filter import ChangeFilter
from buildbot.changes.pb import PBChangeSource
from buildbot.config import BuilderConfig
from buildbot.plugins import reporters
from buildbot.plugins import util
from buildbot.process import results
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.process.results import SUCCESS
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.source.github import GitHub
from buildbot.steps.shell import ShellCommand, Compile, Test
from buildbot.steps.transfer import FileUpload, StringDownload
from buildbot.steps.trigger import Trigger
from buildbot.steps.worker import MakeDirectory, RemoveDirectory
from buildbot.schedulers.basic import AnyBranchScheduler, Dependent
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from datetime import timedelta

# Monkey patch twisted to allow for bigger netstrings -> bigger try patches
from twisted.protocols.basic import NetstringReceiver
NetstringReceiver.MAX_LENGTH = 100 * 2**20   # 100MB

# By default, the banana's string size limit is 640kb, which is insufficient
# when passing diff's around. Raise it to 100megs. Do this here since the limit
# is enforced on both the server and the client so both need to raise the
# limit.
from twisted.spread import banana
banana.SIZE_LIMIT = 100 * 1024 * 1024

import hashlib
import json
import os
import os.path

BUILDSLAVES_PASSWORDS = json.load(open("buildslaves-passwords.json"))
USERS_PASSWORDS = json.load(open("users-passwords.json"))
CHANGESOURCE_PASSWORD = open("changesource-password.txt").read().strip()
WEBAUTH_PASSWORD = open("webauth-password.txt").read().strip()
GH_CLIENT_ID = open("gh-client-id.txt").read().strip()
GH_CLIENT_SECRET = open("gh-client-secret.txt").read().strip()
FIFOCI_API_KEY = open("fifoci-api-key.txt").read().strip()

def StepWasSuccessful(results, step):
    """Pass to hideStepIf in order to hide the step on success."""
    return results == SUCCESS

class GitNoBranch(GitHub):
    """Monkey patch for stupid patch behavior."""

    def __init__(self, *args, **kwargs):
        kwargs.update({'submodules': True})
        super(GitNoBranch, self).__init__(*args, **kwargs)

    def patch(self, _, patch):
        d = self._dovccmd(["apply", "-3", "-p", str(patch[0])],
                initialStdin=patch[1])
        return d

class TriggerIfBranch(Trigger):
    """Monkey patch to trigger only if we're on a given branch."""

    def __init__(self, *args, **kwargs):
        self.branchList = kwargs.pop('branchList')
        super(TriggerIfBranch, self).__init__(*args, **kwargs)

    def run(self):
        sss = self.build.getAllSourceStamps()
        is_master = False
        for ss in sss:
            if not ss.changes:
                continue
            for ch in ss.changes:
                if ch.properties.getProperty("branchname", None) in self.branchList:
                    is_master = True

        if not is_master:
            return results.SKIPPED
        return Trigger.run(self)

    def getResultSummary(self):
        if self.results == results.SKIPPED:
            return {'step': 'skipped (no branch match)'}
        return super().getResultSummary()


def ReliableFileUpload(masterdest, **kwargs):
    """Performs a file upload from a worker, but only doing one CIFS write."""
    masterdir = util.Transform(os.path.dirname, masterdest)
    tmpdest = util.Transform(
        lambda p: os.path.join('/tmp', os.path.basename(p)), masterdest)

    nasdest = util.Transform(
        lambda p: "u129977@u129977.your-storagebox.de:" + p.lstrip('/srv/http/'),
        masterdest)

    return [
        MasterShellCommand(
            command=["mkdir", "-p", masterdir],
            hideStepIf=StepWasSuccessful,
        ),
        FileUpload(masterdest=tmpdest, **kwargs),
        MasterShellCommand(
            command=["scp", "-P23", tmpdest, nasdest],
            hideStepIf=StepWasSuccessful,
        ),
        MasterShellCommand(
            command=["rm", tmpdest],
            hideStepIf=StepWasSuccessful,
        ),
    ]


def get_sharded_dl_path(path_renderable):
    def transformer(path):
        components = path.split('/')
        basename = components[-1]
        sha = hashlib.sha256(basename.encode('utf-8')).hexdigest()
        shard_key1 = sha[0:2]
        shard_key2 = sha[2:4]
        return '/'.join(components[:-1] + [shard_key1, shard_key2, basename])
    return util.Transform(transformer, path_renderable)


def prioritize_builders(buildmaster, builders):
    def priority(builder):
        name = builder.name
        if "nightly-" in name:
            return 4
        elif "dbg-" in name:
            return 3
        elif "pr-" in name:
            return 2
        elif "fifoci-" in name:
            return 1
        elif "release-" in name or "lint" in name:
            return 0
        else:
            return 6

    builders.sort(key=priority)
    return builders


def make_dolphin_win_build(build_type, arch, mode="normal"):
    f = BuildFactory()

    mode = mode.split(",")
    normal = "normal" in mode
    debug = "debug" in mode
    pr = "pr" in mode
    fifoci_golden = "fifoci_golden" in mode
    steam = "steam" in mode

    update_platform = {"x64": "win", "ARM64": "win-arm64"}[arch]

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))
    f.addStep(RemoveDirectory(dir="build/Binary", hideStepIf=StepWasSuccessful))

    branch = WithProperties("%s", "branchname")
    env = {"DOLPHIN_BRANCH": branch, "DOLPHIN_DISTRIBUTOR": "dolphin-emu.org"}
    if normal:
        env["DOLPHIN_DEFAULT_UPDATE_TRACK"] = "beta"
    
    build_command = [
        "msbuild.exe",
        "/v:m",
        "/p:Platform=%s" % arch,
        "/p:Configuration=%s" % build_type,
    ]

    if steam:
        build_command += [
            "/p:Steam=true",
            "/p:AutoUpdate=false"
        ]

    f.addStep(Compile(command=build_command + ["dolphin-emu.sln"],
                      env=env,
                      workdir="build/Source",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    if arch == 'x64':
        f.addStep(Test(command=build_command + ["/p:RunUnitTests=true", "UnitTests.vcxproj"],
                        env=env,
                        workdir="build/Source/UnitTests",
                        description="testing",
                        descriptionDone="test",
                        haltOnFailure=True))

    f.addStep(ShellCommand(command=["xcopy", "Binary\\%s" % arch,
                                    "Dolphin-%s" % arch, "/S", "/I", "/Y"],
                           logEnviron=False,
                           description="copying output",
                           descriptionDone="output copy",
                           hideStepIf=StepWasSuccessful))

    out_filename = WithProperties("Dolphin-%%s-%%s-%s.7z" % arch, "branchname", "shortrev")
    f.addStep(ShellCommand(command=["7z", "a", "-r", out_filename,
                                    "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="compressing",
                           descriptionDone="compression",
                           hideStepIf=StepWasSuccessful))

    if debug:
        fn_arch = "dbg-%s" % arch
    else:
        fn_arch = arch

    artifact_upload = False
    if not steam:
        artifact_upload = True
        if normal:
            master_filename = WithProperties("/srv/http/dl/builds/dolphin-%%s-%%s-%s.7z" % fn_arch, "branchname", "shortrev")
            url = WithProperties("https://dl.dolphin-emu.org/builds/dolphin-%%s-%%s-%s.7z" % fn_arch, "branchname", "shortrev")
        elif pr:
            master_filename = WithProperties("/srv/http/dl/prs/%%s-dolphin-latest-%s.7z" % fn_arch, "branchname")
            url = WithProperties("https://dl.dolphin-emu.org/prs/%%s-dolphin-latest-%s.7z" % fn_arch, "branchname")
        else:
            raise RuntimeError("Unexpected build mode")
        master_filename, url = map(get_sharded_dl_path, (master_filename, url))

    if artifact_upload:
        f.addSteps(ReliableFileUpload(workersrc=out_filename,
                                      masterdest=master_filename,
                                      url=url, keepstamp=True, mode=0o644))

        f.addStep(SetProperty(property="build_url",
                              value=url,
                              hideStepIf=StepWasSuccessful))

        if fifoci_golden and pr:
            f.addStep(Trigger(schedulerNames=["pr-fifoci-win"],
                              copy_properties=["pr_id", "headrev", "branchname", "shortrev", "build_url"],
                              hideStepIf=StepWasSuccessful))

    if normal and not debug:
        if not steam:
            f.addStep(MasterShellCommand(command="/home/buildbot/venv/bin/python /home/buildbot/bin/send_build.py",
                                        env={
                                            "BRANCH": WithProperties("%s", "branchname"),
                                            "SHORTREV": WithProperties("%s", "shortrev"),
                                            "HASH": WithProperties("%s", "revision"),
                                            "AUTHOR": WithProperties("%s", "author"),
                                            "DESCRIPTION": WithProperties("%s", "description"),
                                            "TARGET_SYSTEM": "Windows %s" % (arch),
                                            "USER_OS_MATCHER": "win",
                                            "BUILD_URL": url,
                                        },
                                        description="notifying website",
                                        descriptionDone="website notice"))

            f.addStep(MasterShellCommand(command=["/home/buildbot/venv/bin/python", "/home/buildbot/bin/make_manifest.py",
                                                "--input", master_filename,
                                                "--version_hash", WithProperties("%s", "revision"),
                                                "--platform", update_platform,
                                                "--output-manifest-store", "/data/nas/update/manifest",
                                                "--output-content-store", "/data/nas/update/content",
                                                "--signing-key", "/home/buildbot/update.signing.key"],
                                        description="writing update manifest",
                                        descriptionDone="update manifest write"))
        else:
            master_filename = WithProperties("/tmp/steam/%s/win.7z", "revision")

            f.addStep(FileUpload(workersrc=out_filename,
                                masterdest=master_filename,
                                keepstamp=True, mode=0o644))

    f.addStep(ShellCommand(command=["del", "/F", "/S", "/Q", out_filename],
                           logEnviron=False,
                           description="cleaning up files",
                           descriptionDone="cleanup files",
                           hideStepIf=StepWasSuccessful))

    f.addStep(ShellCommand(command=["rmdir", "/S", "/Q", "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="cleaning up dirs",
                           descriptionDone="cleanup dirs",
                           hideStepIf=StepWasSuccessful))

    return f

def make_dolphin_osx_universal_build(mode="normal"):
    f = BuildFactory()

    mode = mode.split(",")
    normal = "normal" in mode
    pr = "pr" in mode
    fifoci_golden = "fifoci_golden" in mode
    steam = "steam" in mode

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir",
                           hideStepIf=StepWasSuccessful))

    f.addStep(ShellCommand(command="security unlock-keychain -p $(cat ~/.keychain-password) buildbot.keychain-db",
                           workdir="build/build",
                           description="unlocking keychain",
                           descriptionDone="unlock keychain",
                           haltOnFailure=True,
                           hideStepIf=StepWasSuccessful))
    
    command = [
       "../BuildMacOSUniversalBinary.py",
       "-G", "Ninja",
       "--run_unit_tests",
       "--codesign", "Developer ID" 
    ]

    if steam:
        command += [
            "--steam",
            "--no-autoupdate"
        ]

    f.addStep(ShellCommand(command=command,
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(ShellCommand(command="rm -rf dmg.dir && mkdir dmg.dir",
                           workdir="build/build",
                           description="creating tmp dir",
                           descriptionDone="create tmp dir",
                           haltOnFailure=True,
                           hideStepIf=StepWasSuccessful))

    f.addStep(ShellCommand(command="cp -R universal/Dolphin.app dmg.dir",
                           workdir="build/build",
                           description="creating tmp dir",
                           descriptionDone="create tmp dir",
                           haltOnFailure=True,
                           hideStepIf=StepWasSuccessful))

    if not steam:
        f.addStep(ShellCommand(command="cp -R universal/Dolphin\ Updater.app dmg.dir",
                            workdir="build/build",
                            description="creating tmp dir",
                            descriptionDone="create tmp dir",
                            haltOnFailure=True #,hideStepIf=StepWasSuccessful
                            ))

    if normal:
        if steam:
            volume_name = "Dolphin"
        else:
            volume_name = WithProperties("Dolphin %s", "shortrev")
    elif pr:
        volume_name = WithProperties("Dolphin %s", "branchname")
    else:
        volume_name = "Dolphin"

    f.addStep(ShellCommand(command=["hdiutil", "create", "dolphin.dmg",
                                    "-format", "UDBZ",
                                    "-fs", "HFS+", # Needed for 7-Zip support
                                    "-srcfolder", "dmg.dir", "-ov",
                                    "-volname", volume_name],
                           workdir="build/build",
                           logEnviron=False,
                           description="packaging",
                           descriptionDone="package"))

    if normal:
        f.addStep(ShellCommand(command=["xcrun", "notarytool", "submit", "dolphin.dmg",
                                        "--keychain-profile", "NotaryCredentials",
                                        "--keychain", "~/Library/Keychains/buildbot.keychain-db",
                                        "--wait"],
                           workdir="build/build",
                           description="notarizing",
                           descriptionDone="notarize",
                           haltOnFailure=True))

        f.addStep(ShellCommand(command=["xcrun", "stapler", "staple", "dolphin.dmg"],
                           workdir="build/build",
                           description="stapling",
                           descriptionDone="staple",
                           haltOnFailure=True))

    f.addStep(ShellCommand(command="security lock-keychain buildbot.keychain-db",
                        workdir="build/build",
                        description="locking keychain",
                        descriptionDone="lock keychain",
                        haltOnFailure=True,
                        hideStepIf=StepWasSuccessful))
    
    artifact_upload = False
    if not steam:
        artifact_upload = True
        if normal:
            master_filename = WithProperties("/srv/http/dl/builds/dolphin-%s-%s-universal.dmg", "branchname", "shortrev")
            url = WithProperties("https://dl.dolphin-emu.org/builds/dolphin-%s-%s-universal.dmg", "branchname", "shortrev")
        elif pr:
            master_filename = WithProperties("/srv/http/dl/prs/%s-dolphin-latest-universal.dmg", "branchname")
            url = WithProperties("https://dl.dolphin-emu.org/prs/%s-dolphin-latest-universal.dmg", "branchname")
        else:
            raise RuntimeError("Unexpected build mode")
        master_filename, url = map(get_sharded_dl_path, (master_filename, url))

    if artifact_upload:
        f.addSteps(ReliableFileUpload(workersrc="build/dolphin.dmg",
                                      masterdest=master_filename,
                                      url=url, keepstamp=True, mode=0o644))

    if normal:
        if not steam:
            f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                            env={
                                                "BRANCH": WithProperties("%s", "branchname"),
                                                "SHORTREV": WithProperties("%s", "shortrev"),
                                                "HASH": WithProperties("%s", "revision"),
                                                "AUTHOR": WithProperties("%s", "author"),
                                                "DESCRIPTION": WithProperties("%s", "description"),
                                                "TARGET_SYSTEM": "macOS (ARM/Intel Universal)",
                                                "USER_OS_MATCHER": "osx",
                                                "BUILD_URL": url,
                                            },
                                            description="notifying website",
                                            descriptionDone="website notice"))

            tmp_filename = WithProperties("/tmp/macos-universal-%s.7z", "revision")

            f.addStep(MasterShellCommand(command=["/home/buildbot/bin/repack_dmg.sh", master_filename, tmp_filename],
                                        description="converting dmg",
                                        descriptionDone="convert dmg",
                                        hideStepIf=StepWasSuccessful))

            f.addStep(MasterShellCommand(command=["/home/buildbot/venv/bin/python", "/home/buildbot/bin/make_manifest.py",
                                                "--input", tmp_filename,
                                                "--version_hash", WithProperties("%s", "revision"),
                                                "--platform", "macos-universal",
                                                "--output-manifest-store", "/data/nas/update/manifest",
                                                "--output-content-store", "/data/nas/update/content",
                                                "--signing-key", "/home/buildbot/update.signing.key"],
                                        description="writing update manifest",
                                        descriptionDone="update manifest write"))

            f.addStep(MasterShellCommand(command=["rm", tmp_filename],
                                        description="cleaning up",
                                        descriptionDone="clean up",
                                        hideStepIf=StepWasSuccessful))
        else:
            master_filename = WithProperties("/tmp/steam/%s/mac.dmg", "revision")

            f.addStep(FileUpload(workersrc="build/dolphin.dmg",
                                masterdest=master_filename,
                                keepstamp=True, mode=0o644))

    if fifoci_golden and pr:
        f.addStep(Trigger(schedulerNames=["pr-fifoci-osx"],
                            copy_properties=["pr_id", "repo", "headrev", "branchname", "shortrev"],
                            hideStepIf=StepWasSuccessful))

    return f

def make_dolphin_linux_build(mode="normal"):
    f = BuildFactory()

    mode = mode.split(",")

    debug = "debug" in mode
    pr = "pr" in mode
    fifoci_golden = "fifoci_golden" in mode
    generic = "generic" in mode

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir",
                           hideStepIf=StepWasSuccessful))

    cmake_cmd = ["cmake", "..", "-GNinja"]
    if debug:
        cmake_cmd.append("-DFASTLOG=ON")
    if generic:
        cmake_cmd.append("-DENABLE_GENERIC=ON")
    cmake_cmd.append("-DDISTRIBUTOR=dolphin-emu.org")
    f.addStep(ShellCommand(command=cmake_cmd,
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["ninja", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    if fifoci_golden and pr:
        f.addStep(Trigger(schedulerNames=["pr-fifoci-lin"],
                          copy_properties=["pr_id", "repo", "headrev", "branchname", "shortrev"],
                          hideStepIf=StepWasSuccessful))
    return f

def make_dolphin_linux_steamrt_build(mode="normal"):
    f = BuildFactory()

    mode = mode.split(",")

    normal = "normal" in mode
    pr = "pr" in mode

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))
    
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/ext-steam-runtime-qt.git",
                         progress=True, mode="incremental", workdir="qt", branch="master",
                         alwaysUseLatest=True))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir",
                           hideStepIf=StepWasSuccessful))

    cmake_cmd = [
        "cmake", 
        "..",
        "-G", "Ninja",
        WithProperties("-DCMAKE_PREFIX_PATH=%s/qt/latest/amd64", "builddir"),
        "-DSTEAM=ON",
        "-DENABLE_AUTOUPDATE=OFF",
        "-DENABLE_EVDEV=OFF",
        "-DENABLE_LLVM=OFF",
        "-DENABLE_SDL=ON"
    ]

    f.addStep(ShellCommand(command=cmake_cmd,
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["ninja", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))
    
    f.addStep(ShellCommand(command=["7z", "a", "-r", "dolphin.7z",
                                    "Binaries"],
                            workdir="build/build",
                           logEnviron=False,
                           description="compressing",
                           descriptionDone="compression",
                           hideStepIf=StepWasSuccessful))
    
    if normal:
        master_filename = WithProperties("/tmp/steam/%s/lin.7z", "revision")

        f.addStep(FileUpload(workersrc="build/dolphin.7z",
                            masterdest=master_filename,
                            keepstamp=True, mode=0o644))

    return f

def make_android_package(mode="normal"):
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command="rm -rf .cxx/ && rm -rf build/",
                              workdir="build/Source/Android/app",
                              description="Workaround for https://issuetracker.google.com/issues/232060576?pli=1%22",
                              descriptionDone="Workaround for https://issuetracker.google.com/issues/232060576?pli=1%22",
                              haltOnFailure=False))

    if mode == "normal":
        f.addStep(ShellCommand(command="./gradlew :benchmark:pixel6Api31BenchmarkAndroidTest "
                                       "-P android.testInstrumentationRunnerArguments.androidx.benchmark.enabledRules=BaselineProfile "
                                       "-P android.testoptions.manageddevices.emulator.gpu=swiftshader_indirect",
                              workdir="build/Source/Android",
                              description="Baseline Profile",
                              descriptionDone="Baseline Profile",
                              haltOnFailure=False))

        f.addStep(ShellCommand(command="./gradlew assembleRelease",
                               workdir="build/Source/Android",
                               description="Gradle APK",
                               descriptionDone="Gradle APK",
                               haltOnFailure=True))

        f.addStep(ShellCommand(command="./gradlew bundleRelease",
                               workdir="build/Source/Android",
                               description="Gradle Bundle",
                               descriptionDone="Gradle Bundle",
                               haltOnFailure=True))

        source_filename = "Source/Android/app/build/outputs/apk/release/app-release-unsigned.apk"
        master_filename = WithProperties("/srv/http/dl/builds/dolphin-%s-%s.apk", "branchname", "shortrev")
        url = WithProperties("https://dl.dolphin-emu.org/builds/dolphin-%s-%s.apk", "branchname", "shortrev")

        source_filename_play = "Source/Android/app/build/outputs/bundle/release/app-release.aab"
        master_filename_play = WithProperties("/srv/http/dl/builds/dolphin-%s-%s.aab", "branchname", "shortrev")
        url_play = WithProperties("https://dl.dolphin-emu.org/builds/dolphin-%s-%s.aab", "branchname", "shortrev")

    else:
        f.addStep(ShellCommand(command="./gradlew assembleDebug",
                               workdir="build/Source/Android",
                               description="Gradle",
                               descriptionDone="Gradle",
                               haltOnFailure=True))

        source_filename = "Source/Android/app/build/outputs/apk/debug/app-debug.apk"
        master_filename = WithProperties("/srv/http/dl/prs/%s-dolphin-latest.apk", "branchname")
        url = WithProperties("https://dl.dolphin-emu.org/prs/%s-dolphin-latest.apk", "branchname")

    master_filename, url = map(get_sharded_dl_path, (master_filename, url))

    steps = ReliableFileUpload(workersrc=source_filename,
                               masterdest=master_filename,
                               url=url, keepstamp=True, mode=0o644)

    if mode == "normal":
        # XXX: Very hacky.
        tmpdest = util.Transform(lambda p: os.path.join('/tmp', os.path.basename(p)), master_filename)
        apksigner = MasterShellCommand(command=["apksigner", "sign",
                                                "--ks", "/home/buildbot/dolphin-release.keystore",
                                                "--ks-key-alias", "mykey",
                                                "--ks-pass", "file:/home/buildbot/dolphin-release.keystore.pass",
                                                tmpdest],
                                       description="Signing release APK",
                                       descriptionDone="Signing release APK",
                                       haltOnFailure=True)
        steps.insert(2, apksigner)

        master_filename_play, url_play = map(get_sharded_dl_path, (master_filename_play, url_play))

        playupload = ReliableFileUpload(workersrc=source_filename_play,
                                       masterdest=master_filename_play,
                                       url=url_play, keepstamp=True, mode=0o644)

        tmpdest = util.Transform(lambda p: os.path.join('/tmp', os.path.basename(p)), master_filename_play)
        jarsigner_cmd = util.Transform(lambda p: ("jarsigner " 
                                                  "-keystore /home/buildbot/dolphin-release.keystore "
                                                  "-storepass $(cat /home/buildbot/dolphin-release.keystore.pass) "
                                                  "%s mykey") % p, tmpdest)
        jarsigner = MasterShellCommand(command=jarsigner_cmd,
                                       description="Signing release AAB",
                                       descriptionDone="Signing release AAB",
                                       haltOnFailure=True)
        playupload.insert(2, jarsigner)
        steps += playupload

    f.addSteps(steps)

    if mode == "normal":

        f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                     env={
                                         "BRANCH": WithProperties("%s", "branchname"),
                                         "SHORTREV": WithProperties("%s", "shortrev"),
                                         "HASH": WithProperties("%s", "revision"),
                                         "AUTHOR": WithProperties("%s", "author"),
                                         "DESCRIPTION": WithProperties("%s", "description"),
                                         "TARGET_SYSTEM": "Android",
                                         "USER_OS_MATCHER": "android",
                                         "BUILD_URL": url,
                                     },
                                     description="notifying website",
                                     descriptionDone="website notice"))

    return f

def make_dolphin_freebsd_build(mode="normal"):
    f = BuildFactory()

    mode = mode.split(",")

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir",
                           hideStepIf=StepWasSuccessful))

    cmake_cmd = ["cmake", "..", "-GNinja"]
    cmake_cmd.append("-DDISTRIBUTOR=dolphin-emu.org")
    f.addStep(ShellCommand(command=cmake_cmd,
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["ninja", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    return f

def make_fifoci_linux(type, mode="normal"):
    # Requirements for a FifoCI linux buildworker:
    #  - Poetry >= 1.3.0 installed in PATH.
    #  - ~/dff existing to cache DFF files
    #  - ~/fifoci pointing to FifoCI Git

    mode = mode.split(",")
    normal = "normal" in mode
    pr = "pr" in mode

    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command="cd ~/fifoci && git fetch && git checkout master && git reset --hard origin/master || true",
                           logEnviron=False,
                           description="Updating FifoCI",
                           descriptionDone="FifoCI update"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir",
                           hideStepIf=StepWasSuccessful))

    f.addStep(ShellCommand(command="cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/prefix -DCMAKE_BUILD_TYPE=RelWithDebInfo -DENABLE_QT=OFF -DENABLE_EVDEV=OFF -GNinja ..",
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Compile(command=["ninja", "install"],
                      workdir="build/build",
                      description="installing",
                      descriptionDone="install",
                      haltOnFailure=True))

    f.addStep(ShellCommand(command="poetry install -C ~/fifoci/fifoci/runner",
                           description="updating deps",
                           descriptionDone="deps update",
                           haltOnFailure=True))

    f.addStep(StringDownload(FIFOCI_API_KEY,
                             workerdest="fifoci-api.key",
                             workdir="build/build",
                             description="uploading API key",
                             descriptionDone="API key upload",
                             haltOnFailure=True,
                             hideStepIf=StepWasSuccessful))

    url_base = "https://fifo.ci"
    args = [
        "--type", type,
        "--dolphin", "$(pwd)/prefix/bin/dolphin-emu-nogui",
        "--rev_base_hash", "$(git rev-parse HEAD)",
        "--output", "result.zip",
        "--import_api_key_file", "fifoci-api.key",
        "--url_base", url_base,
        "--dff_dir", "~/dff",
    ]
    if normal:
        args += [
            "--rev_hash", "$(git rev-parse HEAD)",
            "--rev_name", "%(shortrev)s",
            "--rev_submitted", "true",
        ]
    elif pr:
        args += [
            "--rev_hash", "%(headrev)s",
            "--rev_name", "%(branchname)s-%(shortrev)s",
            "--rev_submitted", "false",
        ]
    command = "poetry run -C ~/fifoci/fifoci/runner fifoci-runner " + " ".join(args)
    f.addStep(ShellCommand(command=WithProperties(command),
                           workdir="build/build",
                           description="gfx testing",
                           descriptionDone="gfx test",
                           haltOnFailure=True))

    return f

def make_fifoci_osx(type, mode="normal"):
    # Requirements for a FifoCI macOS buildworker:
    #  - coreutils package installed with brew
    #  - Poetry >= 1.3.0 installed in PATH.
    #  - ~/dff existing to cache DFF files
    #  - ~/fifoci pointing to FifoCI Git

    mode = mode.split(",")
    normal = "normal" in mode
    pr = "pr" in mode

    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command="cd ~/fifoci && git fetch && git checkout master && git reset --hard origin/master || true",
                           logEnviron=False,
                           description="Updating FifoCI",
                           descriptionDone="FifoCI update"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir",
                           hideStepIf=StepWasSuccessful))

    f.addStep(ShellCommand(command="cmake -DCMAKE_PREFIX_PATH=/opt/homebrew/opt/qt5 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_MGBA=OFF -GNinja ..",
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(ShellCommand(command="poetry install -C ~/fifoci/fifoci/runner",
                           description="updating deps",
                           descriptionDone="deps update",
                           haltOnFailure=True))

    f.addStep(StringDownload(FIFOCI_API_KEY,
                             workerdest="fifoci-api.key",
                             workdir="build/build",
                             description="uploading API key",
                             descriptionDone="API key upload",
                             haltOnFailure=True,
                             hideStepIf=StepWasSuccessful))

    url_base = "https://fifo.ci"
    args = [
        "--type", type,
        "--dolphin", "Binaries/",
        "--rev_base_hash", "$(git rev-parse HEAD)",
        "--output", "result.zip",
        "--import_api_key_file", "fifoci-api.key",
        "--url_base", url_base,
        "--dff_dir", "$HOME/dff",
    ]
    if normal:
        args += [
            "--rev_hash", "$(git rev-parse HEAD)",
            "--rev_name", "%(shortrev)s",
            "--rev_submitted", "true",
        ]
    elif pr:
        args += [
            "--rev_hash", "%(headrev)s",
            "--rev_name", "%(branchname)s-%(shortrev)s",
            "--rev_submitted", "false",
        ]
    command = "poetry run -C ~/fifoci/fifoci/runner fifoci-runner " + " ".join(args)
    f.addStep(ShellCommand(command=WithProperties(command),
                           workdir="build/build",
                           description="gfx testing",
                           descriptionDone="gfx test",
                           haltOnFailure=True))

    return f

def make_steam_build():
    f = BuildFactory()

    work_dir = WithProperties("/tmp/steam/%s", "revision")

    f.addStep(MasterShellCommand(command=['rm', '-rf' , work_dir],
                                 description="deleting work dir",
                                 descriptionDone="delete work dir",
                                 hideStepIf=StepWasSuccessful,
                                 haltOnFailure=True))

    f.addStep(MasterShellCommand(command=['mkdir', '-p', work_dir],
                                 description="creating work dir",
                                 descriptionDone="create work dir",
                                 hideStepIf=StepWasSuccessful,
                                 haltOnFailure=True))

    f.addStep(Trigger(schedulerNames=["release-steam-all"],
                      copy_properties=["pr_id", "repo", "headrev", "branchname", "shortrev"],
                      waitForFinish=True))

    f.addStep(MasterShellCommand(command=['/home/buildbot/bin/upload_to_steampipe.sh',
                                        work_dir,
                                        WithProperties("%s", "shortrev")],
                                 description="uploading content",
                                 descriptionDone="upload content",
                                 haltOnFailure=True))

    f.addStep(MasterShellCommand(command=["rm", '-rf', work_dir],
                                 description="cleaning up",
                                 descriptionDone="clean up",
                                 hideStepIf=StepWasSuccessful,
                                 alwaysRun=True))

    return f

def make_lint():
    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))
    # Make sure the baserev exists locally. GitHub's "baserev" property is
    # the current base branch head, which isn't guaranteed to exist in the PR
    # branch (e.g. if it hasn't been rebased).
    f.addStep(ShellCommand(command=['git', 'fetch', 'origin']))
    f.addStep(ShellCommand(command=['Tools/lint.sh', WithProperties("%s...", "baserev")],
                           logEnviron=False,
                           description="lint",
                           descriptionDone="lint",
                           haltOnFailure=False))
    return f


BuildmasterConfig = {
    "title": "Dolphin Emulator",
    "titleURL": "https://github.com/dolphin-emu/dolphin.git",
    "buildbotURL": "https://dolphin.ci/",

    # Set low horizons to avoid IO issues.
    "changeHorizon": 100,
    "configurators": [util.JanitorConfigurator(
        build_data_horizon=timedelta(weeks=4),
        logHorizon=timedelta(weeks=4),
        hour=5,
        dayOfWeek=6,
    )],

    # More caching, less IO.
    "caches": {
        "Changes": 5000,
        "Builds": 500,
        "BuildRequests": 200,
        "SourceStamps": 200,
    },

    "logMaxSize": 512 * 1024, # 0.5M
    "logMaxTailSize": 0,

    "prioritizeBuilders": prioritize_builders,

    "workers": [
        Worker("windows", BUILDSLAVES_PASSWORDS["windows"], max_builds=1),
        Worker("osx-m1", BUILDSLAVES_PASSWORDS["osx-m1"], max_builds=1),
        Worker("debian", BUILDSLAVES_PASSWORDS["debian"], max_builds=1),
        Worker("freebsd", BUILDSLAVES_PASSWORDS["freebsd"], max_builds=1),
        Worker("hive", BUILDSLAVES_PASSWORDS["hive"], max_builds=1),
        Worker("arbert", BUILDSLAVES_PASSWORDS["arbert"], max_builds=1),
        Worker("steamrt", BUILDSLAVES_PASSWORDS["steamrt"], max_builds=1),
        Worker("ubuntu-lts", BUILDSLAVES_PASSWORDS["ubuntu-lts"], max_builds=1),
        Worker("altair-fifoci", BUILDSLAVES_PASSWORDS["altair-fifoci"], max_builds=1),
    ],

    "protocols": {
        "pb": {"port": 9989},
    },

    "change_source": [
        PBChangeSource(user="dolphin", passwd=CHANGESOURCE_PASSWORD),
    ],

    "schedulers": [
        AnyBranchScheduler(
            name="release",
            builderNames=[
                "release-win-x64",
                "release-win-arm64",
                "release-osx-universal",
                "release-android",
                "release-steam",

                "fifoci-ogl-lin-mesa",
                "fifoci-ogl-lin-radeon",
                "fifoci-uberogl-lin-radeon",
                "fifoci-sw-lin-mesa",
                "fifoci-mvk-osx-m1",
                "fifoci-mtl-osx-m1",
            ],
            change_filter=util.ChangeFilter(filter_fn=lambda c: not c.properties.getProperty('branchname').startswith("pr-")),
        ),

        AnyBranchScheduler(
            name="pr",
            builderNames=[
                 "pr-win-x64",
                 "pr-win-dbg-x64",
                 "pr-win-arm64",
                 "pr-steam-win-x64",
                 "pr-osx-universal",
                 "pr-steam-osx-universal",
                 "pr-deb-x64",
                 "pr-deb-dbg-x64",
                 "pr-ubu-x64",
                 "pr-steam-runtime-x64",
                 "pr-android",
                 "pr-freebsd-x64",
                 "lint",
            ],
            change_filter=util.ChangeFilter(filter_fn=lambda c: c.properties.getProperty('branchname').startswith("pr-")),
        ),
        Triggerable(name="release-steam-all", builderNames=[
                        "release-steam-win-x64",
                        "release-steam-osx-universal",
                        "release-steam-runtime-x64",
                    ]),

        Triggerable(name="pr-fifoci-lin", builderNames=[
                        "pr-fifoci-ogl-lin-mesa",
                        "pr-fifoci-ogl-lin-radeon",
                        "pr-fifoci-uberogl-lin-radeon",
                        "pr-fifoci-sw-lin-mesa",
                    ]),
        Triggerable(name="pr-fifoci-osx", builderNames=[
                        "pr-fifoci-mvk-osx-m1",
                        "pr-fifoci-mtl-osx-m1",
                    ]),
        Triggerable(name="pr-fifoci-win", builderNames=[
                    ]),

        Nightly(name="nightly", hour=0, builderNames=[
                    "nightly-generic",
                ]),
    ],

    "builders": [
        BuilderConfig(name="release-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", "normal,fifoci_golden")),
        BuilderConfig(name="release-win-arm64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "ARM64", "normal")),
        BuilderConfig(name="release-steam-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", "normal,steam")),
        BuilderConfig(name="release-osx-universal", workernames=["osx-m1"],
                      factory=make_dolphin_osx_universal_build("normal,fifoci_golden")),
        BuilderConfig(name="release-steam-osx-universal", workernames=["osx-m1"],
                      factory=make_dolphin_osx_universal_build("normal,steam")),
        BuilderConfig(name="release-steam-runtime-x64", workernames=["steamrt"],
                      factory=make_dolphin_linux_steamrt_build("normal")),
        BuilderConfig(name="release-android", workernames=["ubuntu-lts"],
                      factory=make_android_package()),
        BuilderConfig(name="release-steam", workernames=["hive"],
                      factory=make_steam_build()),

        BuilderConfig(name="pr-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", "pr,fifoci_golden")),
        BuilderConfig(name="pr-win-dbg-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Debug", "x64", "pr,debug")),
        BuilderConfig(name="pr-win-arm64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "ARM64", "pr")),
        BuilderConfig(name="pr-steam-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", "pr,steam")),
        BuilderConfig(name="pr-osx-universal", workernames=["osx-m1"],
                      factory=make_dolphin_osx_universal_build("pr,fifoci_golden")),
        BuilderConfig(name="pr-steam-osx-universal", workernames=["osx-m1"],
                      factory=make_dolphin_osx_universal_build("pr,steam")),
        BuilderConfig(name="pr-deb-x64", workernames=["debian"],
                      factory=make_dolphin_linux_build("pr")),
        BuilderConfig(name="pr-deb-dbg-x64", workernames=["debian"],
                      factory=make_dolphin_linux_build("pr,debug")),
        BuilderConfig(name="pr-ubu-x64", workernames=["ubuntu-lts"],
                      factory=make_dolphin_linux_build("pr,fifoci_golden")),
        BuilderConfig(name="pr-steam-runtime-x64", workernames=["steamrt"],
                      factory=make_dolphin_linux_steamrt_build("pr")),
        BuilderConfig(name="pr-android", workernames=["ubuntu-lts"],
                      factory=make_android_package("pr")),
        BuilderConfig(name="pr-freebsd-x64", workernames=["freebsd"],
                      factory=make_dolphin_freebsd_build("pr")),

        BuilderConfig(name="fifoci-ogl-lin-mesa", workernames=["altair-fifoci"],
                      factory=make_fifoci_linux("ogl-lin-mesa")),
        BuilderConfig(name="fifoci-ogl-lin-radeon", workernames=["arbert"],
                      factory=make_fifoci_linux("ogl-lin-radeon")),
        BuilderConfig(name="fifoci-uberogl-lin-radeon", workernames=["arbert"],
                      factory=make_fifoci_linux("uberogl-lin-radeon")),
        BuilderConfig(name="fifoci-sw-lin-mesa", workernames=["altair-fifoci"],
                      factory=make_fifoci_linux("sw-lin-mesa")),
        BuilderConfig(name="fifoci-mvk-osx-m1", workernames=["osx-m1"],
                      factory=make_fifoci_osx("mvk-osx-m1")),
        BuilderConfig(name="fifoci-mtl-osx-m1", workernames=["osx-m1"],
                      factory=make_fifoci_osx("mtl-osx-m1")),

        BuilderConfig(name="pr-fifoci-ogl-lin-mesa", workernames=["altair-fifoci"],
                      factory=make_fifoci_linux("ogl-lin-mesa", "pr")),
        BuilderConfig(name="pr-fifoci-ogl-lin-radeon", workernames=["arbert"],
                      factory=make_fifoci_linux("ogl-lin-radeon", "pr")),
        BuilderConfig(name="pr-fifoci-uberogl-lin-radeon", workernames=["arbert"],
                      factory=make_fifoci_linux("uberogl-lin-radeon", "pr")),
        BuilderConfig(name="pr-fifoci-sw-lin-mesa", workernames=["altair-fifoci"],
                      factory=make_fifoci_linux("sw-lin-mesa", "pr")),
        BuilderConfig(name="pr-fifoci-mvk-osx-m1", workernames=["osx-m1"],
                      factory=make_fifoci_osx("mvk-osx-m1", "pr")),
        BuilderConfig(name="pr-fifoci-mtl-osx-m1", workernames=["osx-m1"],
                      factory=make_fifoci_osx("mtl-osx-m1", "pr")),

        BuilderConfig(name="lint", workernames=["ubuntu-lts"],
                      factory=make_lint()),

        BuilderConfig(name="nightly-generic", workernames=["ubuntu-lts"],
                      factory=make_dolphin_linux_build("nightly,generic")),
    ],

    "www": {
        "port": 8010,
        "auth": util.GitHubAuth(
            clientId=GH_CLIENT_ID,
            clientSecret=GH_CLIENT_SECRET,
            apiVersion=4,
            getTeamsMembership=True,
        ),
        "authz": util.Authz(
            allowRules=[
                util.AnyControlEndpointMatcher(role="trusted-developers"),
            ],
            roleMatchers=[
                util.RolesFromGroups(groupPrefix="dolphin-emu/"),
            ],
        ),
        "plugins": {
            "waterfall_view": {"num_builds": 50},
            "console_view": {},
            "grid_view": {},
        },
        "change_hook_dialects": {
            "base": True,
        },
    },

    "services": [
        reporters.HttpStatusPush(serverUrl="https://central.dolphin-emu.org/buildbot"),
        reporters.Prometheus(port=8011),
    ],

    "db": {
        "db_url": "postgresql://buildbot@/buildbot",
    },

    "collapseRequests": False,
}
