# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.changes.filter import ChangeFilter
from buildbot.changes.pb import PBChangeSource
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.status.html import WebStatus
from buildbot.status.status_push import HttpStatusPush
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.status.words import IRC, IRCContact
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand, Compile, Test
from buildbot.steps.transfer import FileUpload
from buildbot.steps.trigger import Trigger
from buildbot.schedulers.basic import AnyBranchScheduler, Dependent
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.trysched import Try_Userpass, Try_Jobdir

# Monkey patch twisted to allow for bigger netstrings -> bigger try patches
from twisted.protocols.basic import NetstringReceiver
NetstringReceiver.MAX_LENGTH = 100 * 2**20   # 100MB

# By default, the banana's string size limit is 640kb, which is insufficient
# when passing diff's around. Raise it to 100megs. Do this here since the limit
# is enforced on both the server and the client so both need to raise the
# limit.
from twisted.spread import banana
banana.SIZE_LIMIT = 100 * 1024 * 1024


# Load external configuration files.
import json

BUILDSLAVES_PASSWORDS = json.load(open('buildslaves-passwords.json'))
USERS_PASSWORDS = json.load(open('users-passwords.json'))
CHANGESOURCE_PASSWORD = open('changesource-password.txt').read().strip()
WEBAUTH_PASSWORD = open('webauth-password.txt').read().strip()

class GitNoBranch(Git):
    """Monkey patch for stupid patch, --branch and fetch behavior."""

    def _dovccmd(self, cmd, *a, **kw):
        newcmd = []
        branch = False
        for item in cmd:
            if branch:
                branch = False
            else:
                if item == '--branch':
                    branch = True
                elif item == 'fetch':
                    newcmd.append(item)
                    break
                else:
                    newcmd.append(item)
        return Git._dovccmd(self, newcmd, *a, **kw)

    def patch(self, _, patch):
        d = self._dovccmd(['apply', '-3', '-p', str(patch[0])],
                initialStdin=patch[1])
        return d

from buildbot.process.buildstep import SUCCESS
class TriggerIfMaster(Trigger):
    """Monkey patch to trigger only if we're on master"""

    def start(self):
        sss = self.build.getAllSourceStamps()
        is_master = False
        for ss in sss:
            if not ss.changes:
                continue
            for ch in ss.changes:
                if ch.properties.getProperty('branchname', None) == 'master':
                    is_master = True

        if is_master:
            return Trigger.start(self)
        else:
            self.running = True
            self.step_status.setText(['(not master)'])
            self.end(SUCCESS)
            return

from buildbot.status.words import maybeColorize
import buildbot.status.words

class MyIRCContact(IRCContact):
    def buildFinished(self, builderName, build, results):
        builder = build.getBuilder()

        if (self.bot.categories != None and
            builder.category not in self.bot.categories):
            return

        if not self.notify_for_finished(build):
            return

        builder_name = builder.getName()
        buildnum = build.getNumber()

        branchname = build.properties.getProperty('branchname', 'unknown')
        shortrev = build.properties.getProperty('shortrev', 'unknown')

        results = self.getResultsDescriptionAndColor(build.getResults())
        if self.reportBuild(builder_name, buildnum):
            buildurl = self.bot.status.getURLForThing(build)
            r = "build %s-%s on %s: [%s] %s" % (
                branchname, shortrev, builder_name, maybeColorize(' '.join(build.getText()), results[1], self.useColors),
                buildurl
            )

            self.send(r)
buildbot.status.words.IrcStatusBot.contactClass = MyIRCContact

class MyHttpStatusPush(HttpStatusPush):
    def buildFinished(self, builderName, build, results):
        self.push('buildFinished', build=build, results=results)

# Force buildbot to decode our patches as utf-8. Warning: terrible.
import base64
old_base64_encode = base64.b64encode
def my_encode(s):
    if isinstance(s, unicode):
        s = s.encode('utf-8')
    return old_base64_encode(s)
base64.b64encode = my_encode

def make_dolphin_win_build(build_type, arch, mode='normal'):
    msarch = "Win32" if arch == "x86" else "x64"
    f = BuildFactory()

    mode = mode.split(',')
    debug = 'debug' in mode
    wip = 'wip' in mode
    pr = 'pr' in mode

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["del", "Binary\\%s\\cg.dll" % msarch,
                                    "Binary\\%s\\cgGL.dll" % msarch],
                           logEnviron=False,
                           description="cleaning cg",
                           descriptionDone="cg clean"))

    branch = WithProperties("%s", "branchname")
    f.addStep(Compile(command=["msbuild.exe", "/m", "/p:Platform=%s" % msarch,
                               "/p:Configuration=%s" % build_type],
                      env={ "DOLPHIN_BRANCH": branch },
                      workdir="build/Source",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    if not pr:
        build_descr = WithProperties("%s-%s", "branchname", "shortrev")
        pdb_file = "Build\\%s\\%s\\Dolphin\\bin\\Dolphin%s.pdb" % (msarch, "Debug" if debug else "Release", "D" if debug else "")
        f.addStep(ShellCommand(command=["C:\\buildbot\\storesymbols.bat", pdb_file,
                                        "Dolphin %s" % arch, build_descr],
                               logEnviron=False,
                               description="extracting symbols",
                               descriptionDone="symbols extraction"))

    f.addStep(ShellCommand(command=["xcopy", "Binary\\%s" % msarch,
                                    "Dolphin-%s" % arch, "/S", "/I", "/Y"],
                           logEnviron=False,
                           description="copying output",
                           descriptionDone="output copy"))

    f.addStep(ShellCommand(command=["del", "Dolphin-%s\\Dolphin.pdb" % arch,
                                    "Dolphin-%s\\DSPTool.pdb" % arch,
                                    "Dolphin-%s\\Dolphin.lib" % arch,
                                    "Dolphin-%s\\Dolphin.exp" % arch],
                           logEnviron=False,
                           description="purging pdb",
                           descriptionDone="pdb purge"))

    out_filename = WithProperties("Dolphin-%%s-%%s-%s.7z" % arch, "branchname", "shortrev")
    f.addStep(ShellCommand(command=["7z", "a", "-r", out_filename,
                                    "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="compressing",
                           descriptionDone="compression"))

    if debug:
        fn_arch = "dbg-%s" % arch
    else:
        fn_arch = arch

    if 'normal' in mode:
        master_filename = WithProperties("/srv/http/dl/builds/dolphin-%%s-%%s-%s.7z" % fn_arch, "branchname", "shortrev")
        url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%%s-%%s-%s.7z" % fn_arch, "branchname", "shortrev")
    elif wip:
        master_filename = WithProperties("/srv/http/dl/wips/%%s-dolphin-%%s-%%s-%s.7z" % fn_arch, "author", "branchname", "shortrev")
        url = WithProperties("http://dl.dolphin-emu.org/wips/%%s-dolphin-%%s-%%s-%s.7z" % fn_arch, "author", "branchname", "shortrev")
    elif pr:
        master_filename = WithProperties("/srv/http/dl/prs/%%s-dolphin-latest-%s.7z" % fn_arch, "branchname")
        url = WithProperties("http://dl.dolphin-emu.org/prs/%%s-dolphin-latest-%s.7z" % fn_arch, "branchname")
    else:
        master_filename = url = ''

    if master_filename and url:
        f.addStep(FileUpload(slavesrc=out_filename, masterdest=master_filename,
                             url=url, keepstamp=True, mode=0644))

    if 'normal' in mode and 'debug' not in mode:
        f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                     env={
                                         "BRANCH": WithProperties("%s", "branchname"),
                                         "SHORTREV": WithProperties("%s", "shortrev"),
                                         "HASH": WithProperties("%s", "revision"),
                                         "AUTHOR": WithProperties("%s", "author"),
                                         "DESCRIPTION": WithProperties("%s", "description"),
                                         "BUILD_TYPE": "win32" if arch == "x86" else "win64",
                                         "BUILD_URL": url
                                     },
                                     description="notifying website",
                                     descriptionDone="website notice"))

    f.addStep(ShellCommand(command=["del", "/F", "/S", "/Q", out_filename],
                           logEnviron=False,
                           description="cleaning up files",
                           descriptionDone="cleanup files"))

    f.addStep(ShellCommand(command=["rmdir", "/S", "/Q", "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="cleaning up dirs",
                           descriptionDone="cleanup dirs"))

    return f

def make_dolphin_osx_build(mode='normal'):
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command=["cmake", ".."],
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["make", "-j4"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["make", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    f.addStep(ShellCommand(command=["hdiutil", "create", "dolphin.dmg",
                                    "-srcfolder", "Binaries/", "-ov",
                                    "-volname", WithProperties("Dolphin %s-%s", "branchname", "shortrev")],
                           workdir="build/build",
                           logEnviron=False,
                           description="packaging",
                           descriptionDone="package"))

    if mode == 'normal':
        master_filename = WithProperties("/srv/http/dl/builds/dolphin-%s-%s.dmg", "branchname", "shortrev")
        url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%s-%s.dmg", "branchname", "shortrev")
    elif mode == 'wip':
        master_filename = WithProperties("/srv/http/dl/wips/%s-dolphin-%s-%s.dmg", "author", "branchname", "shortrev")
        url = WithProperties("http://dl.dolphin-emu.org/wips/%s-dolphin-%s-%s.dmg", "author", "branchname", "shortrev")
    elif mode == 'pr':
        master_filename = WithProperties("/srv/http/dl/prs/%s-dolphin-latest.dmg", "branchname")
        url = WithProperties("http://dl.dolphin-emu.org/prs/%s-dolphin-latest.dmg", "branchname")
    else:
        master_filename = url = ''

    if master_filename and url:
        f.addStep(FileUpload(slavesrc="build/dolphin.dmg", masterdest=master_filename,
                             url=url, keepstamp=True, mode=0644))

    if mode == 'normal':
        f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                     env={
                                         "BRANCH": WithProperties("%s", "branchname"),
                                         "SHORTREV": WithProperties("%s", "shortrev"),
                                         "HASH": WithProperties("%s", "revision"),
                                         "AUTHOR": WithProperties("%s", "author"),
                                         "DESCRIPTION": WithProperties("%s", "description"),
                                         "BUILD_TYPE": "osx",
                                         "BUILD_URL": url
                                     },
                                     description="notifying website",
                                     descriptionDone="website notice"))

    return f

def make_dolphin_debian_build(mode='normal'):
    f = BuildFactory()

    mode = mode.split(',')

    package = 'package' in mode
    debug = 'debug' in mode
    nogui = 'nogui' in mode
    wayland = 'wayland' in mode

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    cmake_cmd = ["cmake", ".."]
    if debug:
        cmake_cmd.append("-DFASTLOG=ON")
    if nogui:
        cmake_cmd.append("-DDISABLE_WX=ON")
    if wayland:
        cmake_cmd.append("-DUSE_X11=OFF")
        cmake_cmd.append("-DUSE_WAYLAND=ON")
    f.addStep(ShellCommand(command=cmake_cmd,
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["make", "-j2"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["make", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    if package:
        f.addStep(TriggerIfMaster(schedulerNames=["pack-ubuntu"]))
    return f

def make_ubuntu_package():
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["rm", "-fr", "debian"],
                           logEnviron=False,
                           description="delting old debian dir",
                           descriptionDone="deleted old debian dir",
                           haltOnFailure=True))

    f.addStep(ShellCommand(command=["tar", "xzf", "/home/buildbot/dolphin-debian.tar.gz"],
                           logEnviron=False,
                           description="untaring debian dir",
                           descriptionDone="untar debian dir",
                           haltOnFailure=True))

    reg = WithProperties("s/VER/%s/", "shortrev")
    f.addStep(ShellCommand(command=["sed", "-i", reg, "debian/changelog"],
                           logEnviron=False,
                           description="updating version",
                           descriptionDone="update version",
                           haltOnFailure=True))

    f.addStep(ShellCommand(command=["dpkg-buildpackage", "-uc", "-us", "-nc", "-b", "-j4"],
                           description="building",
                           descriptionDone="build",
                           haltOnFailure=True))

    chg_file = WithProperties("../dolphin-emu-master_%s_amd64.changes", "shortrev")
    deb_file = WithProperties("../dolphin-emu-master_%s_amd64.deb", "shortrev")
    upl_file = WithProperties("/srv/http/dl/builds/dolphin-master-%s_amd64.deb", "shortrev")
    url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-master-%s_amd64.deb", "shortrev")
    f.addStep(FileUpload(slavesrc=deb_file, masterdest=upl_file,
                         url=url, keepstamp=True, mode=0644))
    
    f.addStep(ShellCommand(command=["rm", "-rf", chg_file, deb_file, "debian"],
                           description="cleaning up",
                           descriptionDone="clean up"))

    f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                 env={
                                     "BRANCH": WithProperties("%s", "branchname"),
                                     "SHORTREV": WithProperties("%s", "shortrev"),
                                     "HASH": WithProperties("%s", "revision"),
                                     "AUTHOR": WithProperties("%s", "author"),
                                     "DESCRIPTION": WithProperties("%s", "description"),
                                     "BUILD_TYPE": "ubu",
                                     "BUILD_URL": url
                                 },
                                 description="notifying website",
                                 descriptionDone="website notice"))

    return f

def make_android_package(mode='normal'):
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command=["cmake", "-DANDROID=True", "-DANDROID_NATIVE_API_LEVEL=android-14",
                                    "-DGIT_EXECUTABLE=/usr/bin/git",
                                    "-DCMAKE_TOOLCHAIN_FILE=../Source/Android/android.toolchain.cmake", ".."],
                           env={ "ANDROID_NDK": "/home/buildbot/ndk" },
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["make", "-j2"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    if mode == 'normal':
        f.addStep(ShellCommand(command="gradle assembleRelease "
                                       "-Pkeystore=$HOME/dolphin-release.keystore "
                                       "-Pstorepass=$(cat ~/.keystore-password) "
                                       "-Pkeyalias=mykey "
                                       "-Pkeypass=$(cat ~/.keystore-password) ",
                               env={ "ANDROID_HOME": "/home/buildbot/adt/sdk" },
                               workdir="build/Source/Android",
                               description="Gradle",
                               descriptionDone="Gradle",
                               haltOnFailure=True))

        master_filename = WithProperties("/srv/http/dl/builds/dolphin-%s-%s.apk", "branchname", "shortrev")
        url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%s-%s.apk", "branchname", "shortrev")
        f.addStep(FileUpload(slavesrc="Source/Android/build/apk/Android-release.apk", masterdest=master_filename,
                             url=url, keepstamp=True, mode=0644))
    else:
        f.addStep(ShellCommand(command="gradle assembleDebug",
                               env={ "ANDROID_HOME": "/home/buildbot/adt/sdk" },
                               workdir="build/Source/Android",
                               description="Gradle",
                               descriptionDone="Gradle",
                               haltOnFailure=True))

    return f

def make_fifoci_linux(type):
    # Requirements for a FifoCI linux buildslave:
    #  - ~/python pointing to the fifoci virtualenv Python.
    #  - ~/dff existing to cache DFF files
    #  - ~/fifoci pointing to FifoCI Git

    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command="cd ~/fifoci && git fetch && git checkout master && git reset --hard origin/master || true",
                           logEnviron=False,
                           description="Updating FifoCI",
                           descriptionDone="FifoCI update"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command="cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/prefix -DDISABLE_WX=ON ..",
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["make", "-j3"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["make", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    f.addStep(Compile(command=["make", "install"],
                      workdir="build/build",
                      description="installing",
                      descriptionDone="install",
                      haltOnFailure=True))

    f.addStep(ShellCommand(command=WithProperties("~/python ~/fifoci/runner/runner.py --dolphin $(pwd)/prefix/bin/dolphin-emu-nogui "
                                                  "--rev_hash $(git rev-parse HEAD) --rev_name %%s "
                                                  "--type %s --output result.zip --dff_dir ~/dff "
                                                  "--url_base https://fifoci.dolphin-emu.org/" % type,
                                                  "shortrev"),
                           workdir="build/build",
                           description="gfx testing",
                           descriptionDone="gfx test",
                           haltOnFailure=True))

    f.addStep(FileUpload(slavesrc="build/result.zip",
                         masterdest="/tmp/fifoci-%s-result.zip" % type,
                         mode=0644))

    f.addStep(MasterShellCommand(command="sudo -u fifoci /home/fifoci/python "
                                         "/home/fifoci/fifoci/frontend/manage.py import_results "
                                         "/tmp/fifoci-%s-result.zip" % type,
                                 description='importing result',
                                 descriptionDone='result import'))

    return f

def make_arm():
    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command="cmake -DDISABLE_WX=ON ..",
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["make", "-j4"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["make", "-j4", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    return f

def make_lint():
    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))
    f.addStep(ShellCommand(command='r=$(Tools/check-includes.py $(find Source/Core -name "*.cpp" -o -name "*.h") 2>&1 >/dev/null);'
                                   'if ! [ -z "$r" ]; then echo "$r"; exit 1; else echo "OK"; fi',
                           logEnviron=False,
                           description="includes",
                           descriptionDone="includes",
                           haltOnFailure=False))
    f.addStep(ShellCommand(command='r=$(find Source/Core -name "*.cpp" -o -name "*.h" | xargs egrep -n "\\s+$");'
                                   'if ! [ -z "$r" ]; then echo "$r"; exit 1; else echo "OK"; fi',
                           logEnviron=False,
                           description="trailing ws",
                           descriptionDone="trailing ws",
                           haltOnFailure=False))
    return f


win64_release = AnyBranchScheduler(name="win64-release", builderNames=["release-win-x64"])
win64_debug = Dependent(name="win64-debug", upstream=win64_release, builderNames=["debug-win-x64"])

osx_release = AnyBranchScheduler(name="osx-release", builderNames=["release-osx-x64"])
deb64_release = AnyBranchScheduler(name="deb64-release", builderNames=["release-deb-x64"])
ubu64_release = AnyBranchScheduler(name="ubu64-release", builderNames=["release-ubu-x64"])
android_release = Dependent(name="android-release", upstream=ubu64_release, builderNames=["release-android"])
fifoci_ogl_lin_mesa = AnyBranchScheduler(name="fifoci-ogl-lin-mesa", builderNames=["fifoci-ogl-lin-mesa"])
fifoci_sw_lin_mesa = AnyBranchScheduler(name="fifoci-sw-lin-mesa", builderNames=["fifoci-sw-lin-mesa"])
fifoci_ogl_lin_nv = AnyBranchScheduler(name="fifoci-ogl-lin-nv", builderNames=["fifoci-ogl-lin-nv"])

lint_release = AnyBranchScheduler(name="lint-release", builderNames=["lint"])

arm_nightly = Nightly(name="arm-nightly", branch=None, builderNames=["nightly-arm"], hour=0, minute=0)
wayland_nightly = Nightly(name="wayland-nightly", branch=None, builderNames=["nightly-wayland"], hour=0, minute=0)

BuildmasterConfig = {
    'title': 'Dolphin Emulator',
    'titleURL': 'https://github.com/dolphin-emu/dolphin.git',
    'buildbotURL': 'http://buildbot.dolphin-emu.org/',

    'slaves': [
        BuildSlave("windows", BUILDSLAVES_PASSWORDS["windows"], max_builds=1),
        BuildSlave("osx", BUILDSLAVES_PASSWORDS["osx"]),
        BuildSlave("debian", BUILDSLAVES_PASSWORDS["debian"]),
        BuildSlave("ubuntu", BUILDSLAVES_PASSWORDS["ubuntu"]),
        BuildSlave("arch64", BUILDSLAVES_PASSWORDS["arch64"]),
        BuildSlave("odroid", BUILDSLAVES_PASSWORDS["odroid"]),
        BuildSlave("ec2-ubu64-nv", BUILDSLAVES_PASSWORDS["ec2-ubu64-nv"]),
    ],
    'slavePortnum': 9989,

    'change_source': [
        PBChangeSource(user="dolphin", passwd=CHANGESOURCE_PASSWORD),
    ],

    'schedulers': [
        win64_release,
        win64_debug,
        osx_release,
        deb64_release,
        ubu64_release,
        android_release,
        fifoci_ogl_lin_mesa,
        fifoci_sw_lin_mesa,
        fifoci_ogl_lin_nv,
        arm_nightly,
        wayland_nightly,

        Triggerable(name="pack-ubuntu", builderNames=["pack-ubu-x64"]),

        Try_Userpass(name="wip", builderNames=[
                         "wip-win-x64",
                         "wip-osx-x64",
                         "wip-deb-x64",
                         "wip-ubu-x64",
                         "wip-android",
                         "lint",
                     ], port=8031,
                     userpass=USERS_PASSWORDS.items()),

        Try_Jobdir(name="pr", builderNames=[
                         "pr-win-x64",
                         "pr-win-dbg-x64",
                         "pr-osx-x64",
                         "pr-deb-x64",
                         "pr-deb-dbg-x64",
                         "pr-ubu-x64",
                         "pr-ubu-nogui-x64",
                         "pr-android",
                         "lint",
                   ], jobdir="/home/buildbot/pr-jobdir"),
    ],

    'builders': [
        BuilderConfig(name="release-win-x64", slavenames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64")),
        BuilderConfig(name="release-osx-x64", slavenames=["osx"],
                      factory=make_dolphin_osx_build()),
        BuilderConfig(name="release-deb-x64", slavenames=["debian"],
                      factory=make_dolphin_debian_build()),
        BuilderConfig(name="release-ubu-x64", slavenames=["ubuntu"],
                      factory=make_dolphin_debian_build('package')),
        BuilderConfig(name="release-android", slavenames=["ubuntu"],
                      factory=make_android_package()),

        BuilderConfig(name="wip-win-x64", slavenames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", 'wip')),
        BuilderConfig(name="wip-osx-x64", slavenames=["osx"],
                      factory=make_dolphin_osx_build('wip')),
        BuilderConfig(name="wip-deb-x64", slavenames=["debian"],
                      factory=make_dolphin_debian_build('wip')),
        BuilderConfig(name="wip-ubu-x64", slavenames=["ubuntu"],
                      factory=make_dolphin_debian_build('wip')),
        BuilderConfig(name="wip-android", slavenames=["ubuntu"],
                      factory=make_android_package('wip')),

        BuilderConfig(name="pr-win-x64", slavenames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", 'pr')),
        BuilderConfig(name="pr-win-dbg-x64", slavenames=["windows"],
                      factory=make_dolphin_win_build("Debug", "x64", 'pr,debug')),
        BuilderConfig(name="pr-osx-x64", slavenames=["osx"],
                      factory=make_dolphin_osx_build('pr')),
        BuilderConfig(name="pr-deb-x64", slavenames=["debian"],
                      factory=make_dolphin_debian_build('pr')),
        BuilderConfig(name="pr-deb-dbg-x64", slavenames=["debian"],
                      factory=make_dolphin_debian_build('pr,debug')),
        BuilderConfig(name="pr-ubu-x64", slavenames=["ubuntu"],
                      factory=make_dolphin_debian_build('pr')),
        BuilderConfig(name="pr-ubu-nogui-x64", slavenames=["ubuntu"],
                      factory=make_dolphin_debian_build('pr,nogui')),
        BuilderConfig(name="pr-android", slavenames=["ubuntu"],
                      factory=make_android_package('pr')),

        BuilderConfig(name="pack-ubu-x64", slavenames=["ubuntu"],
                      factory=make_ubuntu_package()),


        BuilderConfig(name="debug-win-x64", slavenames=["windows"],
                      factory=make_dolphin_win_build("Debug", "x64", 'normal,debug')),

        BuilderConfig(name="fifoci-ogl-lin-mesa", slavenames=["arch64"],
                      factory=make_fifoci_linux("ogl-lin-mesa")),
        BuilderConfig(name="fifoci-sw-lin-mesa", slavenames=["arch64"],
                      factory=make_fifoci_linux("sw-lin-mesa")),
        BuilderConfig(name="fifoci-ogl-lin-nv", slavenames=["ec2-ubu64-nv"],
                      factory=make_fifoci_linux("ogl-lin-nv")),

        BuilderConfig(name="lint", slavenames=["arch64"],
                      factory=make_lint()),

        BuilderConfig(name="nightly-arm", slavenames=["odroid"],
                      factory=make_arm()),
        BuilderConfig(name="nightly-wayland", slavenames=["arch64"],
                      factory=make_dolphin_debian_build('pr,wayland')),
    ],

    'status': [
        WebStatus(http_port=8010, authz=Authz(
            auth=BasicAuth([("dolphin", WEBAUTH_PASSWORD)]),
            forceBuild="auth",
            forceAllBuilds="auth",
            pingBuilder="auth",
            gracefulShutdown="auth",
            stopBuild="auth",
            stopAllBuilds="auth",
            cancelPendingBuild="auth",
            stopChange="auth",
            cleanShutdown="auth"
        ), order_console_by_time=True),

        IRC("irc.freenode.net", "DolBuildBot", channels=[
                { "channel": "#dolphin-dev" },
            ], notify_events={
                "failure": True,
            },
            useRevisions=True,
        ),

        MyHttpStatusPush(serverUrl="http://localhost:8032/buildbot/",
                         maxHttpRequestSize=64 * 2**20),
    ],

    'db': {
        'db_url': 'postgresql://buildbot@localhost/buildbot',
    },

    'mergeRequests': False,
}
