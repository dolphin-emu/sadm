# -*- python -*-
# ex: set syntax=python:

from buildbot.worker import Worker
from buildbot.changes.filter import ChangeFilter
from buildbot.changes.pb import PBChangeSource
from buildbot.config import BuilderConfig
from buildbot.plugins import reporters
from buildbot.plugins import util
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import WithProperties
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.source.github import GitHub
from buildbot.steps.shell import ShellCommand, Compile, Test
from buildbot.steps.transfer import FileUpload
from buildbot.steps.trigger import Trigger
from buildbot.steps.worker import MakeDirectory, RemoveDirectory
from buildbot.schedulers.basic import AnyBranchScheduler, Dependent
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.trysched import Try_Userpass, Try_Jobdir

# Monkey patch twisted to allow for bigger netstrings -> bigger try patches
from twisted.protocols.basic import NetstringReceiver
NetstringReceiver.MAX_LENGTH = 100 * 2**20   # 100MB

# By default, the banana's string size limit is 640kb, which is insufficient
# when passing diff's around. Raise it to 100megs. Do this here since the limit
# is enforced on both the server and the client so both need to raise the
# limit.
from twisted.spread import banana
banana.SIZE_LIMIT = 100 * 1024 * 1024


# Load external configuration files.
import json

BUILDSLAVES_PASSWORDS = json.load(open("buildslaves-passwords.json"))
USERS_PASSWORDS = json.load(open("users-passwords.json"))
CHANGESOURCE_PASSWORD = open("changesource-password.txt").read().strip()
WEBAUTH_PASSWORD = open("webauth-password.txt").read().strip()

OVHPROXY_URL = "https://ovhproxy.dolphin-emu.org/?url="

def shortrev(props):
    """Property renderer that uses the passed in shortrev if available (usually
    something like 5.0-XXXX) and falls back to calculating it from got_revision
    if not."""

    value = props.getProperty("shortrev", "")
    if not value:
        value = props.getProperty("got_revision")[:6]
    return value

class GitNoBranch(GitHub):
    """Monkey patch for stupid patch behavior."""

    def __init__(self, *args, **kwargs):
        kwargs.update({'submodules': True})
        super(GitNoBranch, self).__init__(*args, **kwargs)

    def patch(self, _, patch):
        d = self._dovccmd(["apply", "-3", "-p", str(patch[0])],
                initialStdin=patch[1])
        return d

from buildbot.process.buildstep import SUCCESS
class TriggerIfBranch(Trigger):
    """Monkey patch to trigger only if we're on a given branch."""

    def __init__(self, *args, **kwargs):
        self.branchList = kwargs.pop('branchList')
        super(TriggerIfBranch, self).__init__(*args, **kwargs)

    def start(self):
        sss = self.build.getAllSourceStamps()
        is_master = False
        for ss in sss:
            if not ss.changes:
                continue
            for ch in ss.changes:
                if ch.properties.getProperty("branchname", None) in self.branchList:
                    is_master = True

        if is_master:
            return Trigger.start(self)
        else:
            self.running = True
            self.step_status.setText(["(no branch match)"])
            self.end(SUCCESS)
            return


def prioritize_builders(buildmaster, builders):
    def priority(builder):
        name = builder.name
        if "nightly-" in name:
            return 5
        elif "dbg-" in name:
            return 4
        elif "wip-" in name:
            return 3
        elif "pr-" in name:
            return 2
        elif "fifoci-" in name:
            return 1
        elif "release-" in name:
            return 0
        else:
            return 6

    builders.sort(key=priority)
    return builders


# Force buildbot to decode our patches as utf-8. Warning: terrible.
import base64
old_base64_encode = base64.b64encode
def my_encode(s):
    if isinstance(s, unicode):
        s = s.encode("utf-8")
    return old_base64_encode(s)
base64.b64encode = my_encode

def make_dolphin_win_build(build_type, arch, mode="normal"):
    msarch = "Win32" if arch == "x86" else "x64"
    f = BuildFactory()

    mode = mode.split(",")
    debug = "debug" in mode
    wip = "wip" in mode
    pr = "pr" in mode
    fifoci_golden = "fifoci_golden" in mode

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    branch = WithProperties("%(branchname)s")
    env = {"DOLPHIN_BRANCH": branch, "DOLPHIN_DISTRIBUTOR": "dolphin-emu.org"}
    f.addStep(Compile(command=["msbuild.exe", "/v:m", "/p:Platform=%s" % msarch,
                               "/p:Configuration=%s" % build_type,
                               "dolphin-emu.sln"],
                      env=env,
                      workdir="build/Source",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))
    f.addStep(Test(command=["msbuild.exe", "/v:m", "/p:Platform=%s" % msarch,
                               "/p:Configuration=%s" % build_type,
                               "/p:RunUnitTests=true",
                               "dolphin-emu.sln"],
                      env=env,
                      workdir="build/Source",
                      description="testing",
                      descriptionDone="test",
                      haltOnFailure=True))

    dolphin_name = "DolphinD" if debug else "Dolphin"
    if not pr:
        build_descr = WithProperties("%(branchname)s-%(shortrev)s", shortrev=shortrev)
        pdb_file = "Build\\%s\\%s\\Dolphin\\bin\\%s.pdb" % (msarch, "Debug" if debug else "Release", dolphin_name)
        f.addStep(ShellCommand(command=["C:\\buildbot\\storesymbols.bat", pdb_file,
                                        "Dolphin %s" % arch, build_descr],
                               logEnviron=False,
                               description="extracting symbols",
                               descriptionDone="symbols extraction"))

    f.addStep(ShellCommand(command=["C:\\buildbot\\signbin.bat", "Binary\\%s\\%s.exe" % (msarch, dolphin_name)],
                           logEnviron=False,
                           description="signing binary",
                           descriptionDone="sign binary"))

    f.addStep(ShellCommand(command=["xcopy", "Binary\\%s" % msarch,
                                    "Dolphin-%s" % arch, "/S", "/I", "/Y"],
                           logEnviron=False,
                           description="copying output",
                           descriptionDone="output copy"))

    out_filename = WithProperties("Dolphin-%%(branchname)s-%%(shortrev)s-%s.7z" % arch, shortrev=shortrev)
    f.addStep(ShellCommand(command=["7z", "a", "-r", out_filename,
                                    "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="compressing",
                           descriptionDone="compression"))

    if debug:
        fn_arch = "dbg-%s" % arch
    else:
        fn_arch = arch

    if "normal" in mode:
        master_filename = WithProperties("/srv/http/dl/builds/dolphin-%%(branchname)s-%%(shortrev)s-%s.7z" % fn_arch, shortrev=shortrev)
        url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%%(branchname)s-%%(shortrev)s-%s.7z" % fn_arch, shortrev=shortrev)
    elif wip:
        master_filename = WithProperties("/srv/http/dl/wips/%%(author)s-dolphin-%%(branchname)s-%%(shortrev)s-%s.7z" % fn_arch, shortrev=shortrev)
        url = WithProperties("http://dl.dolphin-emu.org/wips/%%(author)s-dolphin-%%(branchname)s-%%(shortrev)s-%s.7z" % fn_arch, shortrev=shortrev)
    elif pr:
        master_filename = WithProperties("/srv/http/dl/prs/%%(branchname)s-dolphin-latest-%s.7z" % fn_arch)
        url = WithProperties("http://dl.dolphin-emu.org/prs/%%(branchname)s-dolphin-latest-%s.7z" % fn_arch)
    else:
        master_filename = url = ""

    f.addStep(SetProperty(property="build_url",
                          value=url))

    if master_filename and url:
        f.addStep(FileUpload(workersrc=out_filename, masterdest=master_filename,
                             url=url, keepstamp=True, mode=0644))

    if fifoci_golden:
        if pr:
            f.addStep(Trigger(schedulerNames=["pr-fifoci-win"],
                              copy_properties=["pr_id", "headrev", "branchname", "shortrev", "build_url"]))
        else:
            f.addStep(TriggerIfBranch(schedulerNames=["fifoci-win"],
                                      branchList=["master"],
                                      copy_properties=["shortrev", "build_url"]))

    if "normal" in mode and "debug" not in mode:
        f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                     env={
                                         "BRANCH": WithProperties("%(branchname)s"),
                                         "SHORTREV": WithProperties("%(shortrev)s", shortrev=shortrev),
                                         "HASH": WithProperties("%(got_revision)s"),
                                         "AUTHOR": WithProperties("%(author)s"),
                                         "DESCRIPTION": WithProperties("%(description)s"),
                                         "TARGET_SYSTEM": "Windows x86" if arch == "x86" else "Windows x64",
                                         "USER_OS_MATCHER": "win",
                                         "BUILD_URL": url,
                                     },
                                     description="notifying website",
                                     descriptionDone="website notice"))

    f.addStep(ShellCommand(command=["del", "/F", "/S", "/Q", out_filename],
                           logEnviron=False,
                           description="cleaning up files",
                           descriptionDone="cleanup files"))

    f.addStep(ShellCommand(command=["rmdir", "/S", "/Q", "Dolphin-%s" % arch],
                           logEnviron=False,
                           description="cleaning up dirs",
                           descriptionDone="cleanup dirs"))

    return f

def make_fifoci_win(type, mode="normal"):
    mode = mode.split(",")
    normal = "normal" in mode
    pr = "pr" in mode
    ovhproxy = "ovhproxy" in mode

    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))
    f.addStep(ShellCommand(command="powershell C:/utils/bin/updfifoci.ps1",
                           description="updating FifoCI",
                           descriptionDone="FifoCI update"))
    f.addStep(RemoveDirectory("build/tmp", haltOnFailure=False, flunkOnFailure=False))
    f.addStep(MakeDirectory("build/tmp"))
    f.addStep(ShellCommand(command=WithProperties("powershell C:/utils/bin/wgetwrapper.ps1 %s%%(build_url)s build.7z" % (OVHPROXY_URL if ovhproxy else "")),
                           description="downloading build",
                           descriptionDone="download",
                           workdir="build/tmp",
                           haltOnFailure=True))
    f.addStep(ShellCommand(command="7z x build.7z",
                           description="extracting build",
                           descriptionDone="extracting",
                           workdir="build/tmp",
                           haltOnFailure=True))

    url_base = "https://fifoci.dolphin-emu.org"
    if ovhproxy:
        url_base = OVHPROXY_URL + url_base
    args = [
        "--type", type,
        "--dolphin", "Dolphin-x64/Dolphin.exe",
        "--rev_base_hash", "%(revision)s",
        "--output", "result.zip",
        "--url_base", url_base,
        "--dff_dir", "C:/dff",
    ]
    if normal:
        args += [
            "--rev_hash", "%(revision)s",
            "--rev_name", "%(shortrev)s",
            "--rev_submitted", "true",
        ]
    elif pr:
        args += [
            "--rev_hash", "%(headrev)s",
            "--rev_name", "%(branchname)s-%(shortrev)s",
            "--rev_submitted", "false",
        ]
    command = "C:/Python34/python.exe C:/fifoci/runner/runner.py " + " ".join(args)
    f.addStep(ShellCommand(command=WithProperties(command, shortrev=shortrev),
                           workdir="build/tmp",
                           description="gfx testing",
                           descriptionDone="gfx test",
                           haltOnFailure=True))

    f.addStep(FileUpload(workersrc="tmp/result.zip",
                         masterdest="/tmp/fifoci-%s-result.zip" % type,
                         mode=0644))

    f.addStep(MasterShellCommand(command="sudo -u fifoci /home/fifoci/python "
                                         "/home/fifoci/fifoci/frontend/manage.py import_results "
                                         "/tmp/fifoci-%s-result.zip" % type,
                                 description="importing result",
                                 descriptionDone="result import"))

    return f

def make_dolphin_osx_build(mode="normal"):
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command=["cmake", "-GNinja", "-DDISTRIBUTOR=dolphin-emu.org", ".."],
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["ninja", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    f.addStep(ShellCommand(command="/build/codesign.sh --deep Binaries/Dolphin.app",
                           workdir="build/build",
                           description="signing",
                           descriptionDone="sign",
                           haltOnFailure=True))

    f.addStep(ShellCommand(command=["hdiutil", "create", "dolphin.dmg",
                                    "-format", "UDBZ",
                                    "-srcfolder", "Binaries/Dolphin.app", "-ov",
                                    "-volname", WithProperties("Dolphin %(branchname)s-%(shortrev)s", shortrev=shortrev)],
                           workdir="build/build",
                           logEnviron=False,
                           description="packaging",
                           descriptionDone="package"))

    f.addStep(ShellCommand(command="/build/codesign.sh --deep dolphin.dmg",
                           workdir="build/build",
                           description="signing dmg",
                           descriptionDone="sign dmg",
                           haltOnFailure=True))

    if mode == "normal":
        master_filename = WithProperties("/srv/http/dl/builds/dolphin-%(branchname)s-%(shortrev)s.dmg", shortrev=shortrev)
        url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%(branchname)s-%(shortrev)s.dmg", shortrev=shortrev)
    elif mode == "wip":
        master_filename = WithProperties("/srv/http/dl/wips/%(author)s-dolphin-%(branchname)s-%(shortrev)s.dmg", shortrev=shortrev)
        url = WithProperties("http://dl.dolphin-emu.org/wips/%(author)s-dolphin-%(branchname)s-%(shortrev)s.dmg", shortrev=shortrev)
    elif mode == "pr":
        master_filename = WithProperties("/srv/http/dl/prs/%(branchname)s-dolphin-latest.dmg")
        url = WithProperties("http://dl.dolphin-emu.org/prs/%(branchname)s-dolphin-latest.dmg")
    else:
        master_filename = url = ""

    if master_filename and url:
        f.addStep(FileUpload(workersrc="build/dolphin.dmg", masterdest=master_filename,
                             url=url, keepstamp=True, mode=0644))

    if mode == "normal":
        f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                     env={
                                         "BRANCH": WithProperties("%(branchname)s"),
                                         "SHORTREV": WithProperties("%(shortrev)s", "shortrev"),
                                         "HASH": WithProperties("%(got_revision)s"),
                                         "AUTHOR": WithProperties("%(author)s"),
                                         "DESCRIPTION": WithProperties("%(description)s"),
                                         "TARGET_SYSTEM": "macOS",
                                         "USER_OS_MATCHER": "osx",
                                         "BUILD_URL": url,
                                     },
                                     description="notifying website",
                                     descriptionDone="website notice"))

    return f

def make_dolphin_debian_build(mode="normal"):
    f = BuildFactory()

    mode = mode.split(",")

    debug = "debug" in mode
    pr = "pr" in mode
    fifoci_golden = "fifoci_golden" in mode

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    cmake_cmd = ["cmake", "..", "-GNinja"]
    if debug:
        cmake_cmd.append("-DFASTLOG=ON")
    cmake_cmd.append("-DDISTRIBUTOR=dolphin-emu.org")
    f.addStep(ShellCommand(command=cmake_cmd,
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["ninja", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    if fifoci_golden:
        if pr:
            f.addStep(Trigger(schedulerNames=["pr-fifoci-lin"],
                              copy_properties=["pr_id", "repo", "headrev", "branchname", "shortrev"]))
        else:
            f.addStep(TriggerIfBranch(schedulerNames=["fifoci-lin"],
                                      branchList=["master"],
                                      copy_properties=["shortrev"]))
    return f

def make_android_package(mode="normal"):
    f = BuildFactory()

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    if mode == "normal":
        f.addStep(ShellCommand(command="./gradlew assembleRelease "
                                       "-Pkeystore=$HOME/dolphin-release.keystore "
                                       "-Pstorepass=$(cat ~/.keystore-password) "
                                       "-Pkeyalias=mykey "
                                       "-Pkeypass=$(cat ~/.keystore-password) ",
                               workdir="build/Source/Android",
                               description="Gradle",
                               descriptionDone="Gradle",
                               haltOnFailure=True))

        source_filename = "Source/Android/app/build/outputs/apk/app-release.apk"
        master_filename = WithProperties("/srv/http/dl/builds/dolphin-%(branchname)s-%(shortrev)s.apk", shortrev=shortrev)
        url = WithProperties("http://dl.dolphin-emu.org/builds/dolphin-%(branchname)s-%(shortrev)s.apk", shortrev=shortrev)

    else:
        f.addStep(ShellCommand(command="./gradlew assembleDebug",
                               workdir="build/Source/Android",
                               description="Gradle",
                               descriptionDone="Gradle",
                               haltOnFailure=True))

        source_filename = "Source/Android/app/build/outputs/apk/app-debug.apk"
        master_filename = WithProperties("/srv/http/dl/prs/%(branchname)s-dolphin-latest.apk")
        url = WithProperties("http://dl.dolphin-emu.org/prs/%(branchname)s-dolphin-latest.apk")

    f.addStep(FileUpload(workersrc=source_filename,
                             masterdest=master_filename,
                             url=url, keepstamp=True, mode=0644))

    if mode == "normal":
        f.addStep(MasterShellCommand(command="/home/buildbot/bin/send_build.py",
                                     env={
                                         "BRANCH": WithProperties("%(branchname)s"),
                                         "SHORTREV": WithProperties("%(shortrev)s", shortrev),
                                         "HASH": WithProperties("%(got_revision)s"),
                                         "AUTHOR": WithProperties("%(author)s"),
                                         "DESCRIPTION": WithProperties("%(description)s"),
                                         "TARGET_SYSTEM": "Android",
                                         "USER_OS_MATCHER": "android",
                                         "BUILD_URL": url,
                                     },
                                     description="notifying website",
                                     descriptionDone="website notice"))

    return f

def make_dolphin_freebsd_build(mode="normal"):
    f = BuildFactory()

    mode = mode.split(",")

    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    cmake_cmd = ["cmake", "..", "-GNinja"]
    cmake_cmd.append("-DDISTRIBUTOR=dolphin-emu.org")
    f.addStep(ShellCommand(command=cmake_cmd,
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True,
                           env={ "WX_CONFIG": "wxgtk2u-3.0-config" }))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["ninja", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    return f

def make_fifoci_linux(type, mode="normal"):
    # Requirements for a FifoCI linux buildworker:
    #  - ~/python pointing to the fifoci virtualenv Python.
    #  - ~/dff existing to cache DFF files
    #  - ~/fifoci pointing to FifoCI Git

    mode = mode.split(",")
    normal = "normal" in mode
    pr = "pr" in mode
    ovhproxy = "ovhproxy" in mode

    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command="cd ~/fifoci && git fetch && git checkout master && git reset --hard origin/master || true",
                           logEnviron=False,
                           description="Updating FifoCI",
                           descriptionDone="FifoCI update"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command="cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/prefix -DDISABLE_WX=ON -DENABLE_EVDEV=OFF -GNinja ..",
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Compile(command=["ninja", "install"],
                      workdir="build/build",
                      description="installing",
                      descriptionDone="install",
                      haltOnFailure=True))

    url_base = "https://fifoci.dolphin-emu.org"
    if ovhproxy:
        url_base = OVHPROXY_URL + url_base
    args = [
        "--type", type,
        "--dolphin", "$(pwd)/prefix/bin/dolphin-emu-nogui",
        "--rev_base_hash", "$(git rev-parse HEAD)",
        "--output", "result.zip",
        "--url_base", url_base,
        "--dff_dir", "~/dff",
    ]
    if normal:
        args += [
            "--rev_hash", "$(git rev-parse HEAD)",
            "--rev_name", "%(shortrev)s",
            "--rev_submitted", "true",
        ]
    elif pr:
        args += [
            "--rev_hash", "%(headrev)s",
            "--rev_name", "%(branchname)s-%(shortrev)s",
            "--rev_submitted", "false",
        ]
    command = "~/python ~/fifoci/runner/runner.py " + " ".join(args)
    f.addStep(ShellCommand(command=WithProperties(command, shortrev=shortrev),
                           workdir="build/build",
                           description="gfx testing",
                           descriptionDone="gfx test",
                           haltOnFailure=True))

    f.addStep(FileUpload(workersrc="build/result.zip",
                         masterdest="/tmp/fifoci-%s-result.zip" % type,
                         mode=0644))

    f.addStep(MasterShellCommand(command="sudo -u fifoci /home/fifoci/python "
                                         "/home/fifoci/fifoci/frontend/manage.py import_results "
                                         "/tmp/fifoci-%s-result.zip" % type,
                                 description="importing result",
                                 descriptionDone="result import"))

    return f

def make_arm():
    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))

    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir"))

    f.addStep(ShellCommand(command="cmake -DDISABLE_WX=ON -GNinja ..",
                           workdir="build/build",
                           description="configuring",
                           descriptionDone="configure",
                           haltOnFailure=True))

    f.addStep(Compile(command=["ninja"],
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      haltOnFailure=True))

    f.addStep(Test(command=["ninja", "unittests"],
                   workdir="build/build",
                   description="testing",
                   descriptionDone="test",
                   haltOnFailure=True))

    return f

def make_lint():
    f = BuildFactory()
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="incremental"))
    f.addStep(ShellCommand(command='Tools/lint.sh',
                           logEnviron=False,
                           description="lint",
                           descriptionDone="lint",
                           haltOnFailure=False))
    return f


def make_index():
    f = BuildFactory()
    env = {
        "CC": "/home/ubuntu/sadm/codesearch/clang",
        "CXX": "/home/ubuntu/sadm/codesearch/clang++",
        "CINDEX_FILE": "/mnt/cindex",
        "KYTHE_CLAIMS_FILE": "/mnt/claims",
        "KYTHE_INDEX_PACK": "1",
        "KYTHE_OUTPUT_DIRECTORY": "/mnt/pack",
        "KYTHE_GRAPHSTORE_DIRECTORY": "/mnt/graphstore",
        "KYTHE_TABLES_DIRECTORY": "/mnt/tables",
        "KYTHE_VNAMES": "/home/ubuntu/sadm/codesearch/vnames.json",
    }
    f.addStep(ShellCommand(command="rm -rf $KYTHE_OUTPUT_DIRECTORY $KYTHE_CLAIMS_FILE $KYTHE_GRAPHSTORE_DIRECTORY $KYTHE_TABLES_DIRECTORY $CINDEX_FILE",
                           description="cleaning",
                           descriptionDone="clean",
                           env=env))
    f.addStep(GitNoBranch(repourl="https://github.com/dolphin-emu/dolphin.git",
                          progress=True, mode="full", method="fresh"))
    f.addStep(ShellCommand(command=["mkdir", "-p", "build"],
                           logEnviron=False,
                           description="mkbuilddir",
                           descriptionDone="mkbuilddir",
                           env=env))
    f.addStep(ShellCommand(command="cmake -GNinja ..",
                           workdir="build/build",
                           description="cmake",
                           descriptionDone="cmake",
                           env=env))
    f.addStep(Compile(command="ninja all unittests",
                      workdir="build/build",
                      description="building",
                      descriptionDone="build",
                      env=env))
    f.addStep(ShellCommand(command="make-claims.sh $KYTHE_OUTPUT_DIRECTORY $KYTHE_CLAIMS_FILE",
                           description="claiming",
                           descriptionDone="claim",
                           env=env))
    f.addStep(ShellCommand(command="make-index.sh $KYTHE_OUTPUT_DIRECTORY $KYTHE_CLAIMS_FILE $KYTHE_GRAPHSTORE_DIRECTORY",
                           description="indexing",
                           descriptionDone="index",
                           env=env))
    f.addStep(ShellCommand(command="make-tables.sh $KYTHE_GRAPHSTORE_DIRECTORY $KYTHE_TABLES_DIRECTORY",
                           description="tabling",
                           descriptionDone="table",
                           timeout=3600,
                           env=env))
    f.addStep(ShellCommand(command="make-cindex.sh $KYTHE_TABLES_DIRECTORY $CINDEX_FILE",
                           description="cindex-ing",
                           descriptionDone="cindex",
                           env=env))
    f.addStep(ShellCommand(command="sync-cindex.sh $CINDEX_FILE codesearch@underlord.dolphin-emu.org cindex",
                           description="syncing cindex",
                           descriptionDone="cindex sync",
                           env=env))
    f.addStep(ShellCommand(command="sync-tables.sh $KYTHE_TABLES_DIRECTORY codesearch@underlord.dolphin-emu.org tables",
                           description="syncing tables",
                           descriptionDone="tables sync",
                           env=env))
    return f


win64_release = AnyBranchScheduler(name="win64-release", builderNames=["release-win-x64"])
win64_debug = Dependent(name="win64-debug", upstream=win64_release, builderNames=["debug-win-x64"])

osx_release = AnyBranchScheduler(name="osx-release", builderNames=["release-osx-x64"])
deb64_release = AnyBranchScheduler(name="deb64-release", builderNames=["release-deb-x64"])
ubu64_release = AnyBranchScheduler(name="ubu64-release", builderNames=["release-ubu-x64"])
android_release = Dependent(name="android-release", upstream=ubu64_release, builderNames=["release-android"])

freebsd_release = AnyBranchScheduler(name="freebsd-release", builderNames=["release-freebsd-x64"])

lint_release = AnyBranchScheduler(name="lint-release", builderNames=["lint"])

arm_nightly = Nightly(name="arm-nightly", branch=None, builderNames=["nightly-arm"], hour=0, minute=0)
indexer_nightly = Nightly(name="indexer-nightly", branch=None, builderNames=["nightly-index"], hour=20, minute=30)

BuildmasterConfig = {
    "title": "Dolphin Emulator",
    "titleURL": "https://github.com/dolphin-emu/dolphin.git",
    "buildbotURL": "https://buildbot.dolphin-emu.org/",

    # Set low horizons to avoid IO issues.
    "changeHorizon": 100,
    "buildHorizon": 50,
    "logHorizon": 25,

    # More caching, less IO.
    "caches": {
        "Changes": 5000,
        "Builds": 500,
        "BuildRequests": 200,
        "SourceStamps": 200,
    },

    "prioritizeBuilders": prioritize_builders,

    "workers": [
        Worker("windows", BUILDSLAVES_PASSWORDS["windows"], max_builds=1),
        Worker("osx", BUILDSLAVES_PASSWORDS["osx"], max_builds=1),
        Worker("debian", BUILDSLAVES_PASSWORDS["debian"], max_builds=1),
        Worker("ubuntu", BUILDSLAVES_PASSWORDS["ubuntu"], max_builds=1),
        Worker("arch64", BUILDSLAVES_PASSWORDS["arch64"]),
        Worker("freebsd", BUILDSLAVES_PASSWORDS["freebsd"], max_builds=1),
        Worker("ec2-ubu64-nouveau", BUILDSLAVES_PASSWORDS["ec2-ubu64-nouveau"], keepalive_interval=60, max_builds=1),
        Worker("ec2-ubu64-nv", BUILDSLAVES_PASSWORDS["ec2-ubu64-nv"], keepalive_interval=60, max_builds=1),
        Worker("ec2-win64-nv", BUILDSLAVES_PASSWORDS["ec2-win64-nv"], keepalive_interval=60, max_builds=1),
        Worker("ec2-ubu64-indexer", BUILDSLAVES_PASSWORDS["ec2-ubu64-indexer"], keepalive_interval=60, max_builds=1),
        Worker("delroth-nuc", BUILDSLAVES_PASSWORDS["delroth-nuc"], max_builds=1),
        Worker("delroth-vm-ubuntu-radeon", BUILDSLAVES_PASSWORDS["delroth-vm-ubuntu-radeon"], max_builds=1),
    ],

    "protocols": {
        "pb": {"port": 9989},
    },

    "change_source": [
        PBChangeSource(user="dolphin", passwd=CHANGESOURCE_PASSWORD),
    ],

    "schedulers": [
        win64_release,
        win64_debug,
        osx_release,
        deb64_release,
        ubu64_release,
        android_release,
        freebsd_release,
        indexer_nightly,

        Triggerable(name="fifoci-lin", builderNames=[
                        "fifoci-ogl-lin-intel",
                        "fifoci-ogl-lin-mesa",
                        "fifoci-ogl-lin-nouveau",
                        "fifoci-ogl-lin-nv",
                        "fifoci-ogl-lin-radeon",
                        "fifoci-sw-lin-mesa",
                    ]),
        Triggerable(name="fifoci-win", builderNames=[
                        "fifoci-dx-win-nv",
                    ]),
        Triggerable(name="pr-fifoci-lin", builderNames=[
                        "pr-fifoci-ogl-lin-intel",
                        "pr-fifoci-ogl-lin-mesa",
                        "pr-fifoci-ogl-lin-nouveau",
                        "pr-fifoci-ogl-lin-nv",
                        "pr-fifoci-ogl-lin-radeon",
                        "pr-fifoci-sw-lin-mesa",
                    ]),
        Triggerable(name="pr-fifoci-win", builderNames=[
                        "pr-fifoci-dx-win-nv",
                    ]),

        Try_Userpass(name="wip", builderNames=[
                         "wip-win-x64",
                         "wip-osx-x64",
                         "wip-deb-x64",
                         "wip-ubu-x64",
                         "wip-android",
                         "wip-freebsd-x64",
                         "lint",
                     ], port=8031,
                     userpass=USERS_PASSWORDS.items()),

        Try_Jobdir(name="pr", builderNames=[
                         "pr-win-x64",
                         "pr-win-dbg-x64",
                         "pr-osx-x64",
                         "pr-deb-x64",
                         "pr-deb-dbg-x64",
                         "pr-ubu-x64",
                         "pr-android",
                         "pr-freebsd-x64",
                         "lint",
                   ], jobdir="/home/buildbot/pr-jobdir"),
    ],

    "builders": [
        BuilderConfig(name="release-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", "normal,fifoci_golden")),
        BuilderConfig(name="release-osx-x64", workernames=["osx"],
                      factory=make_dolphin_osx_build()),
        BuilderConfig(name="release-deb-x64", workernames=["debian"],
                      factory=make_dolphin_debian_build()),
        BuilderConfig(name="release-ubu-x64", workernames=["ubuntu"],
                      factory=make_dolphin_debian_build("fifoci_golden")),
        BuilderConfig(name="release-android", workernames=["ubuntu"],
                      factory=make_android_package()),
        BuilderConfig(name="release-freebsd-x64", workernames=["freebsd"],
                      factory=make_dolphin_freebsd_build()),

        BuilderConfig(name="wip-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", "wip")),
        BuilderConfig(name="wip-osx-x64", workernames=["osx"],
                      factory=make_dolphin_osx_build("wip")),
        BuilderConfig(name="wip-deb-x64", workernames=["debian"],
                      factory=make_dolphin_debian_build("wip")),
        BuilderConfig(name="wip-ubu-x64", workernames=["ubuntu"],
                      factory=make_dolphin_debian_build("wip")),
        BuilderConfig(name="wip-android", workernames=["ubuntu"],
                      factory=make_android_package("wip")),
        BuilderConfig(name="wip-freebsd-x64", workernames=["freebsd"],
                      factory=make_dolphin_freebsd_build("wip")),

        BuilderConfig(name="pr-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Release", "x64", "pr,fifoci_golden")),
        BuilderConfig(name="pr-win-dbg-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Debug", "x64", "pr,debug")),
        BuilderConfig(name="pr-osx-x64", workernames=["osx"],
                      factory=make_dolphin_osx_build("pr")),
        BuilderConfig(name="pr-deb-x64", workernames=["debian"],
                      factory=make_dolphin_debian_build("pr")),
        BuilderConfig(name="pr-deb-dbg-x64", workernames=["debian"],
                      factory=make_dolphin_debian_build("pr,debug")),
        BuilderConfig(name="pr-ubu-x64", workernames=["ubuntu"],
                      factory=make_dolphin_debian_build("pr,fifoci_golden")),
        BuilderConfig(name="pr-android", workernames=["ubuntu"],
                      factory=make_android_package("pr")),
        BuilderConfig(name="pr-freebsd-x64", workernames=["freebsd"],
                      factory=make_dolphin_freebsd_build("pr")),

        BuilderConfig(name="debug-win-x64", workernames=["windows"],
                      factory=make_dolphin_win_build("Debug", "x64", "normal,debug")),

        BuilderConfig(name="fifoci-dx-win-nv", workernames=["ec2-win64-nv"],
                      factory=make_fifoci_win("dx-win-nv", "normal")),
        BuilderConfig(name="fifoci-ogl-lin-intel", workernames=["delroth-nuc"],
                      factory=make_fifoci_linux("ogl-lin-intel")),
        BuilderConfig(name="fifoci-ogl-lin-mesa", workernames=["arch64"],
                      factory=make_fifoci_linux("ogl-lin-mesa")),
        BuilderConfig(name="fifoci-ogl-lin-nouveau", workernames=["ec2-ubu64-nouveau"],
                      factory=make_fifoci_linux("ogl-lin-nouveau", "normal")),
        BuilderConfig(name="fifoci-ogl-lin-nv", workernames=["ec2-ubu64-nv"],
                      factory=make_fifoci_linux("ogl-lin-nv", "normal")),
        BuilderConfig(name="fifoci-ogl-lin-radeon", workernames=["delroth-vm-ubuntu-radeon"],
                      factory=make_fifoci_linux("ogl-lin-radeon")),
        BuilderConfig(name="fifoci-sw-lin-mesa", workernames=["arch64"],
                      factory=make_fifoci_linux("sw-lin-mesa")),

        BuilderConfig(name="pr-fifoci-dx-win-nv", workernames=["ec2-win64-nv"],
                      factory=make_fifoci_win("dx-win-nv", "pr")),
        BuilderConfig(name="pr-fifoci-ogl-lin-intel", workernames=["delroth-nuc"],
                      factory=make_fifoci_linux("ogl-lin-intel", "pr")),
        BuilderConfig(name="pr-fifoci-ogl-lin-mesa", workernames=["arch64"],
                      factory=make_fifoci_linux("ogl-lin-mesa", "pr")),
        BuilderConfig(name="pr-fifoci-ogl-lin-nouveau", workernames=["ec2-ubu64-nouveau"],
                      factory=make_fifoci_linux("ogl-lin-nouveau", "pr")),
        BuilderConfig(name="pr-fifoci-ogl-lin-nv", workernames=["ec2-ubu64-nv"],
                      factory=make_fifoci_linux("ogl-lin-nv", "pr")),
        BuilderConfig(name="pr-fifoci-ogl-lin-radeon", workernames=["delroth-vm-ubuntu-radeon"],
                      factory=make_fifoci_linux("ogl-lin-radeon", "pr")),
        BuilderConfig(name="pr-fifoci-sw-lin-mesa", workernames=["arch64"],
                      factory=make_fifoci_linux("sw-lin-mesa", "pr")),

        BuilderConfig(name="lint", workernames=["ubuntu"],
                      factory=make_lint()),

        BuilderConfig(name="nightly-index", workernames=["ec2-ubu64-indexer"],
                      factory=make_index()),
    ],

    "www": {
        "port": 8010,
        "auth": util.UserPasswordAuth({"dolphin": WEBAUTH_PASSWORD}),
        "plugins": {
            "waterfall_view": {"num_builds": 50},
        },
    },

    "services": [
        reporters.HttpStatusPush(serverUrl="https://central.dolphin-emu.org/buildbot",
                                 wantProperties=True),
    ],

    "db": {
        "db_url": "postgresql://buildbot@/buildbot",
    },

    "collapseRequests": False,
}
